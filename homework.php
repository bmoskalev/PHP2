<?php
// Задание 1
// Можно создать класс описывающий сущность обувь.
// Задаине 2
// У этого класса можно определить следующие свойства размер, вес, материал из которого изготовлена, цена,
// количество на складе, производитель, артикул.
// Задаине 3
// Для каждого свойства можно добавить методы геттер и сеттер, с помощью которых можно задавать или получать
// значения этих свойств.
// Задание 4
// Наследниками класса обувь можно сделать конкретные виды обуви будь то сапоги кроссовки ботинки.
// Они будут отличаться от родительского класса наличием дополнительных свойств как то длинна молнии, количество дырок
// под шнурки, длина используемых шнурков, предназначение конкретной обуви (например кроссовки для игры,
// для бега, для походов)

//Задание 5
class A {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
$a1 = new A();
$a2 = new A();
$a1->foo(); //1
$a2->foo(); //2
$a1->foo(); //3
$a2->foo(); //4
//В данном случае $a1 и $b1 это экземпляры одного класса и у них одна общая статическая переменная $x.
//Поэтому при вызове метода foo эта переменная каждыц раз будет увеличивать на 1 и выводиться на экран
//

//Задание 6
class A {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
class B extends A {
}
$a1 = new A();
$b1 = new B();
$a1->foo(); //1
$b1->foo(); //1
$a1->foo(); //2
$b1->foo(); //2
//В данном случае $a1 и $b1 это экземпляры разных классов (родителя и наследника). У них $x это разные переменные
// из разных классов.
//Поэтому при вызове метода foo эта переменная каждыц раз будет увеличивать на 1 только в своем классе A или B
// и выводиться на экран
//

//Задание 7
class A {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
class B extends A {
}
$a1 = new A;
$b1 = new B;
$a1->foo(); //1
$b1->foo(); //1
$a1->foo(); //2
$b1->foo(); //2
//В данном случае $a1 и $b1 это экземпляры разных классов (родителя и наследника). У них $x это разные переменные
// из разных классов. Отсутствие скобок никак не влияет потому что нет входных паарметров дял констуктора
//Поэтому при вызове метода foo эта переменная каждыц раз будет увеличивать на 1 только в своем классе A или B
// и выводиться на экран
